import java.util.ArrayList;
import java.util.Scanner;

class Room {
    private int roomNumber;
    private String category;
    private boolean isAvailable;
    private double price;

    public Room(int roomNumber, String category, boolean isAvailable, double price) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.isAvailable = isAvailable;
        this.price = price;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean isAvailable) {
        this.isAvailable = isAvailable;
    }

    public double getPrice() {
        return price;
    }
}

class Reservation {
    private int reservationId;
    private Room room;
    private String customerName;
    private String checkInDate;
    private String checkOutDate;

    public Reservation(int reservationId, Room room, String customerName, String checkInDate, String checkOutDate) {
        this.reservationId = reservationId;
        this.room = room;
        this.customerName = customerName;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
    }

    public int getReservationId() {
        return reservationId;
    }

    public Room getRoom() {
        return room;
    }

    public String getCustomerName() {
        return customerName;
    }

    public String getCheckInDate() {
        return checkInDate;
    }

    public String getCheckOutDate() {
        return checkOutDate;
    }

    public void displayReservationDetails() {
        System.out.println("Reservation ID: " + reservationId);
        System.out.println("Customer Name: " + customerName);
        System.out.println("Room Number: " + room.getRoomNumber());
        System.out.println("Room Category: " + room.getCategory());
        System.out.println("Check-In Date: " + checkInDate);
        System.out.println("Check-Out Date: " + checkOutDate);
        System.out.println("Price: " + room.getPrice());
    }
}

public class HotelReservationSystem {
    private static ArrayList<Room> rooms = new ArrayList<>();
    private static ArrayList<Reservation> reservations = new ArrayList<>();
    private static int reservationCounter = 1;

    public static void main(String[] args) {
        initializeRooms();
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Hotel Reservation System");
            System.out.println("1. Search for available rooms");
            System.out.println("2. Make a reservation");
            System.out.println("3. View booking details");
            System.out.println("4. Exit");
            System.out.print("Select an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    searchAvailableRooms(scanner);
                    break;
                case 2:
                    makeReservation(scanner);
                    break;
                case 3:
                    viewBookingDetails(scanner);
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void initializeRooms() {
        rooms.add(new Room(101, "Single", true, 100.0));
        rooms.add(new Room(102, "Double", true, 150.0));
        rooms.add(new Room(103, "Suite", true, 200.0));
        rooms.add(new Room(104, "Single", true, 100.0));
        rooms.add(new Room(105, "Double", true, 150.0));
    }

    private static void searchAvailableRooms(Scanner scanner) {
        System.out.print("Enter room category (Single/Double/Suite): ");
        String category = scanner.nextLine();
        System.out.println("Available rooms in category: " + category);
        for (Room room : rooms) {
            if (room.getCategory().equalsIgnoreCase(category) && room.isAvailable()) {
                System.out.println("Room Number: " + room.getRoomNumber() + ", Price: " + room.getPrice());
            }
        }
    }

    private static void makeReservation(Scanner scanner) {
        System.out.print("Enter room number: ");
        int roomNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        Room selectedRoom = null;
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                selectedRoom = room;
                break;
            }
        }
        if (selectedRoom == null) {
            System.out.println("Room is not available or does not exist.");
            return;
        }
        System.out.print("Enter customer name: ");
        String customerName = scanner.nextLine();
        System.out.print("Enter check-in date (yyyy-mm-dd): ");
        String checkInDate = scanner.nextLine();
        System.out.print("Enter check-out date (yyyy-mm-dd): ");
        String checkOutDate = scanner.nextLine();

        Reservation reservation = new Reservation(reservationCounter++, selectedRoom, customerName, checkInDate, checkOutDate);
        reservations.add(reservation);
        selectedRoom.setAvailable(false);
        System.out.println("Reservation made successfully. Reservation ID: " + reservation.getReservationId());
    }

    private static void viewBookingDetails(Scanner scanner) {
        System.out.print("Enter reservation ID: ");
        int reservationId = scanner.nextInt();
        for (Reservation reservation : reservations) {
            if (reservation.getReservationId() == reservationId) {
                reservation.displayReservationDetails();
                return;
            }
        }
        System.out.println("Reservation not found.");
    }
}
